"""
Author: Alex Cannan
Date Created: 4/23/20
Purpose: This file will hold the SourceNode class, which is the smallest object
in the source tree generated by this package
"""

from urllib.parse import urlparse

from newspaper import Article

from ..logger import logger


def get_url_base(url):
    return urlparse(url).netloc


def read_blacklist():
    with open('blacklist.txt', 'r') as f:
        blacklist = []
        for line in f:
            if (sline := line.strip()):
                blacklist.append(sline)
        return blacklist


def blacklist_check(badurl, base):
    X = base.split(".")
    A = badurl.split(".")
    for i in range(len(X) - len(A) + 1):
        if A == X[i:i+len(A)]:
            return True
    return False


class SourceNode:
    def __init__(self, url, parent=None):
        self.url = url
        self.links = []
        self.parents = [parent]
        self.children = []
        self.scan_level = 0

    def get_links(self):
        logger.info(f"Parsing {self.url}")
        try:
            article = Article(self.url)
            article.download()
            article.parse()
            self.links = article.links
        except Exception as e:
            logger.opt(exception=e).warning(f"Failed to parse {self.url}")

    def filter_links(self, ignore_local=True, check_blacklist=True):
        local_base = get_url_base(self.url)
        good_links = []
        blacklist = read_blacklist()
        for link in self.links:
            link_good = True
            base = get_url_base(link)
            if ignore_local and base == local_base:
                link_good = False
            if check_blacklist:
                for badurl in blacklist:
                    if blacklist_check(badurl, base):
                        link_good = False
            if base == '':
                link_good = False
            if link_good:
                good_links.append(link)
        self.links = good_links


if __name__ == '__main__':
    print("Bad links:", read_blacklist())
